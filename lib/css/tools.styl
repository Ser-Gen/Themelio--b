/*
 * Size utility.
 * 
 * Synopsis:
 * 
 *   size: <width> <height> | <width & height>
 * 
 * Examples:
 * 
 *     size: 100% 30px
 *       yields:
 *         width: 100%
 *         height: 30px
 * 
 *     size: 5px
 *       yields:
 *         width: 5px
 *         height: 5px
 * 
 */

size()
	if length(arguments) == 1
		width: arguments[0]
		height: arguments[0]
	else
		width: arguments[0]
		height: arguments[1]





// helper

-pos(type, args)
	i = 0
	position: unquote(type)
	for j in (1..4)
		if length(args) > i
			{args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
		i += 1

/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   fixed: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     fixed: top left
 *     fixed: top 5px left
 *     fixed: top left 5px
 *     fixed: top 5px left 5px
 * 
 */

fixed()
	-pos('fixed', arguments)

/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   absolute: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     absolute: top left
 *     absolute: top 5px left
 *     absolute: top left 5px
 *     absolute: top 5px left 5px
 * 
 */

absolute()
	-pos('absolute', arguments)

/*
 * Position utility.
 * 
 * Synopsis:
 * 
 *   relative: <pos> [n] <pos> [n]
 * 
 * Examples:
 * 
 *     relative: top left
 *     relative: top 5px left
 *     relative: top left 5px
 *     relative: top 5px left 5px
 * 
 */

relative()
	-pos('relative', arguments)



/* https://github.com/nDmitry/stylus/blob/master/lib/mixins/arrow.styl */

/**
 * Generates an arrow with optional borders
 *
 * Example: arrow(6px, left, $brandColor)
 *
 * @param size: px, em
 * @param pos: top, bottom, left, right
 * @param bg: hex, rgb, hsl Background color
 * @param b-wh: px, em Border width
 * @param b-cl: hex, rgb Border color
 * @param offset: px, em, %
 */
arrow(size = 20px, pos = top, bg = white, b-wh = false, b-cl = black, offset = 50%) {
	
	align = 'left' if pos in (top bottom);
	align = 'top' if pos in (left right);

	pos = '%s' % pos;

	position: relative;

	common-arrow-style() {
		position: absolute;
		{opposite-position(pos)}: 100%;
		{align}: offset;
		content: ' ';
		border: solid transparent;
	}

	&:after {
		common-arrow-style();
		margin-{align}: -(size);
		border-{opposite-position(pos)}-color: bg;
		border-width: size;
	}

	if b-wh {
		&:before {
			common-arrow-style();
			margin-{align}: -(size) - b-wh;
			border-{opposite-position(pos)}-color: b-cl;
			border-width: size + b-wh;
		}
	}
}


/* позволяют задавать поля и отступы только нужным сторонам */

margin-x() {
	if (length(arguments) == 1) {
		margin-right: arguments[0]
		margin-left: arguments[0]
	} else {
		margin-right: arguments[0]
		margin-left: arguments[1]
	}
}

padding-x() {
	if (length(arguments) == 1) {
		padding-right: arguments[0]
		padding-left: arguments[0]
	} else {
		padding-right: arguments[0]
		padding-left: arguments[1]
	}
}

margin-y() {
	if (length(arguments) == 1) {
		margin-top: arguments[0]
		margin-bottom: arguments[0]
	} else {
		margin-top: arguments[0]
		margin-bottom: arguments[1]
	}
}

padding-y() {
	if (length(arguments) == 1) {
		padding-top: arguments[0]
		padding-bottom: arguments[0]
	} else {
		padding-top: arguments[0]
		padding-bottom: arguments[1]
	}
}



// блочная примесь, чтобы одновременно задавать стили при наведении и при фокусе

hocus() {
	&:hover,
	&.hover,
	&:focus {
		{block}
	}
}


// расширяет элемент классами, перечисленными через пробел в параметрах

extender(class) {
	for class in arguments {
		class = '.'+class;
		@extend {class};
	}
}



// сборщик медиавыражений
// http://kizu.ru/issues/new-stylus-features/#result

// Определяем объект кеша
$media_cache = {}

// Миксин, кеширующий медиаквери
media($condition)
	helper($condition)
		unless $media_cache[$condition]
			$media_cache[$condition] = ()
		push($media_cache[$condition], block)

	+helper($condition)
		{selector() + ''}
			{block}

// Функция, вызывающая закешированные медиаквери
apply_media_cache()
	for $media, $blocks in $media_cache
		$media = unquote($mediaAliases[$media] || $media)
		$media = '(%s)' % $media unless match('\(', $media)
		$media = 'only screen and %s' % $media
		@media $media
			for $block in $blocks
				{$block}



/*
 * Функция, кеширующая стили тем
 * и добавляющая их в конец итогового файла
 * внутри блока вызывать +theme('blue') {стили в теме}
 * и после всех стилей обязателен вызов apply_theme_cache()
 */

// Определяем объект кеша
$theme_cache = {}

// Миксин, кеширующий стили темы
theme($condition)
	helper($condition)
		unless $theme_cache[$condition]
			$theme_cache[$condition] = ()
		push($theme_cache[$condition], block)

	+helper($condition)
		{selector() + ''}
			{block}

// Функция, вызывающая закешированные темы
apply_theme_cache()
	for $theme, $blocks in $theme_cache
		$theme = unquote($theme)
		$theme = '%s ' % $theme
		.Page--theme-{$theme}
			for $block in $blocks
				{$block}


/*
 * Функция выводит все цвета для темы в обёртке темы
 *
 * Должен быть объявлен массив вида (внимание на кавычки)
 * $theme = {
 *   blue: {
 *     'brand': 'red'
 *   },
 *   green: {
 *     'brand': 'blue'
 *   }
 * }
 *
 * В функции используется самая простая автозамена,
 * поэтому не используйте ключи, имя которых состоит из имён других
 *
 * Использование:
 * .lol {
 *   themes({
 *     'box-shadow':'0 0 brand'
 *     'color':'brand'
 *   })
 * }
 */

themes($hash) {
	for $th,$theme-data in $theme {
		for $theme-prop,$theme-param in $theme-data {
			/.Page--theme-{$th} & {
				for $prop, $param in $hash {
					if match($theme-prop, $param) {
						{$prop} : unquote(replace($theme-prop, $theme[$th][$theme-prop], $param))
					}
				}
			}
		}
	}
}
